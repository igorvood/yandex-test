package ru.vood.flow.abstraction.router.abstraction.enumR

import ru.vood.flow.abstraction.router.abstraction.IWorker
import ru.vood.flow.abstraction.router.abstraction.IWorkerSingleId

/**
 * Интерфейс `IEnumWorker` расширяет интерфейс `IWorker`, определяя специфический рабочий процесс обработки данных
 * с использованием перечисления (`enum`) для идентификации рабочих заданий.
 *
 * @param T Тип входных данных, обрабатываемых рабочим процессом.
 * @param R Тип результата, возвращаемого рабочим процессом.
 * @param E Перечисление, используемое для идентификации конкретных рабочих заданий.
 */
interface IEnumWorker<
        /**Входящие данные (Any), любые типы допустимы*/
        in T : Any,
        /**Выходящий результат (Any), любой тип результата разрешен*/
        out R : Any,
        /** Идентификатор воркера Ограничение параметра типа: должно быть перечисляемым типом*/
        E
        >
    : IWorker<T, R, E>
        where E : Enum<out E> {


    /**
     * Основной метод выполнения рабочего задания, реализующий обработку данных асинхронно.
     *
     * Этот метод делегирует выполнение рабочему методу `handle`.
     *
     * @param data Данные, подлежащие обработке.
     * @param wId Идентификатор конкретного рабочего задания (перечисление).
     * @return Результат выполнения задания.
     */
    override suspend fun doWork(data: T, wId: E): R {
        return handle(data, wId)
    }

    /**
     * Метод реализации конкретной логики обработки данных.
     *
     * Данный метод должен быть переопределён в классах-потомках интерфейса.
     *
     * @param data Данные, подлежащие обработке.
     * @param wId Идентификатор текущего рабочего задания.
     * @return Обработанные данные.
     */
    fun handle(data: T, wId: E): R

}

interface IEnumWorkerSingleId<
        /**Входящие данные (Any), любые типы допустимы*/
        in T : Any,
        /**Выходящий результат (Any), любой тип результата разрешен*/
        out R : Any,
        /** Идентификатор воркера Ограничение параметра типа: должно быть перечисляемым типом*/
        E
        > : IEnumWorker<T, R, E>, IWorkerSingleId<T, R, E>
        where E : Enum<out E>